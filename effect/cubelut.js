this.defaultName="Cube LUT",this.shaderfile="fx_lut",this.lut=null,this.shaderUrl="/assets/shaders/fragment/"+this.shaderfile+".glsl",this.vertShader=this.parentProject.assets.createFromPreset(PZ.asset.type.SHADER,"/assets/shaders/vertex/common.glsl"),this.fragShader=this.parentProject.assets.createFromPreset(PZ.asset.type.SHADER,this.shaderUrl),this.propertyDefinitions={enabled:{dynamic:!0,name:"Enabled",type:PZ.property.type.OPTION,value:1,items:"off;on"},lut:{name:"Cube LUT file",type:PZ.property.type.ASSET,assetType:PZ.asset.type.MISC,value:null,accept:".cube",changed:function(){let e=this.parentObject;e.lut&&(e.parentProject.assets.unload(e.lut),e.lut=null,e.pass.uniforms.tDiffuse.value.dispose(),e.pass.uniforms.tDiffuse.value=null),this.value&&(e.lut=new PZ.asset.cubelut(e.parentProject.assets.load(this.value)),e.lut.getLUT().then(t=>{e.updateTexture(t)})),e.pass.material.needsUpdate=!0}}},this.properties.addAll(this.propertyDefinitions,this),this.load=async function(e){this.vertShader=new PZ.asset.shader(this.parentProject.assets.load(this.vertShader)),this.fragShader=new PZ.asset.shader(this.parentProject.assets.load(this.fragShader));var t=new THREE.ShaderMaterial({uniforms:{tDiffuse:{type:"t",value:null},uvScale:{type:"v2",value:new THREE.Vector2(1,1)},tLUT:{type:"t",value:null}},defines:{LUT_3D:!1,LUT_SIZE:1,DOMAIN_MIN:"vec3(0.,0.,0.)",DOMAIN_MAX:"vec3(0.,0.,0.)"},vertexShader:await this.vertShader.getShader(),fragmentShader:await this.fragShader.getShader()});t.premultipliedAlpha=!0,this.pass=new THREE.ShaderPass(t),this.properties.load(e&&e.properties)},this.updateTexture=function(e){let t,s;"1D"===e.type?(t=e.size,s=1):(t=e.size*e.size,s=e.size);let a=new THREE.DataTexture(e.data,t,s,THREE.RGBFormat);a.magFilter=THREE.LinearFilter,a.needsUpdate=!0,this.pass.material.uniforms.tLUT.value=a,this.pass.material.defines.LUT_3D="3D"===e.type,this.pass.material.defines.LUT_SIZE=e.size.toFixed(1),this.pass.material.defines.DOMAIN_MIN=`vec3(${e.domain[0].map(e=>e.toFixed(1)).join(",")})`,this.pass.material.defines.DOMAIN_MAX=`vec3(${e.domain[1].map(e=>e.toFixed(1)).join(",")})`,this.pass.material.needsUpdate=!0},this.toJSON=function(){return{type:this.type,properties:this.properties}},this.unload=function(e){this.lut&&this.parentProject.assets.unload(this.lut),this.parentProject.assets.unload(this.vertShader),this.parentProject.assets.unload(this.fragShader)},this.update=function(e){this.pass&&(this.pass.enabled=1===this.properties.enabled.get(e)&&null!==this.properties.lut.get())},this.prepare=async function(e){this.lut&&await this.lut.loading};